generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  price       Float
  category    String
  description String
  imageUrl    String?
  createdAt   DateTime   @default(now())
  sellerId    String
  CartItem    CartItem[]
  Order       Order[]
  seller      Seller     @relation(fields: [sellerId], references: [id])

  Shop Shop[]

  Admin Admin[] @relation("AdminToProduct")
}

model Shop {
  id               String   @id @default(cuid())
  ownerId          String   @unique   
  fullName         String
  businessName     String
  businessPhone    String?
  businessEmail    String
  location         String?
  deliveryArea     String?
  storeName        String?
  storeDescription String?
  storeLogo        String?
  storeBanner      String?
  paymentMethod    String?
  legalAccepted    Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  owner            User     @relation(fields: [ownerId], references: [id])
  products         Product[]
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  phone         String?  @unique
  password      String
  createdAt     DateTime @default(now())
  role          String?
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  Admin         Admin?
  Buyer         Buyer?
  Seller        Seller?
  sessions      Session[]
  Shop          Shop?    
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Buyer {
  id        String   @id @default(uuid())
  BuyerId   String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  name      String
  email     String   @unique
  phone     String?  @unique
  password  String
  user      User     @relation(fields: [userId], references: [id])
  Cart      Cart[]
  Order     Order[]
  Admin     Admin[]  @relation("AdminToBuyer")
}

model Seller {
  id        String    @id @default(uuid())
  SellerId  String    @unique
  userId    String    @unique
  createdAt DateTime  @default(now())
  name      String
  email     String    @unique
  phone     String?   @unique
  password  String
  Product   Product[]
  user      User      @relation(fields: [userId], references: [id])
  Admin     Admin[]   @relation("AdminToSeller")
}

model Order {
  id         String   @id @default(uuid())
  productId  String
  buyerId    String
  quantity   Int
  totalPrice Float
  status     String
  createdAt  DateTime @default(now())
  buyer      Buyer    @relation(fields: [buyerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  Admin      Admin[]  @relation("AdminToOrder")
}

model Cart {
  id        String     @id @default(uuid())
  buyerId   String
  createdAt DateTime   @default(now())
  buyer     Buyer      @relation(fields: [buyerId], references: [id])
  CartItem  CartItem[]
  Admin     Admin[]    @relation("AdminToCart")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  Admin     Admin[]  @relation("AdminToCartItem")
}



model Admin {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  phone       String?    @unique
  password    String
  createdAt   DateTime   @default(now())
  role        String
  permissions String[]
  userId      String?    @unique
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id])
  Buyer       Buyer[]    @relation("AdminToBuyer")
  Cart        Cart[]     @relation("AdminToCart")
  CartItem    CartItem[] @relation("AdminToCartItem")
  Order       Order[]    @relation("AdminToOrder")
  Product     Product[]  @relation("AdminToProduct")
  Seller      Seller[]   @relation("AdminToSeller")
}
